name: Follow Upstream

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ '**', '!gh-pages', '!coverage' ]
    types: [ opened, reopened, ready_for_review, synchronize ]
  schedule:
    - cron: '0 17 * * 0'
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  check:
    name: Upstream
    uses: StirlingLabs/Actions/.github/workflows/nugetCheckRelease.yaml@main
    with:
      upstream: 'unicode-org/icu4x'
      rids: 'linux-x64 win-x64 osx'
      releasePrefix: 'icu@'
      ignoreReleases: '1.0.0-beta1 0.6.0 0.5.0 0.4.1 0.4.0 0.3.0 0.2.0 0.1.0'
      nupkgName: 'StirlingLabs.icu4x.runtime.RID'

  binaries:
    name: Build
    needs: [ check ]
    if: needs.check.outputs.continue == 'true'
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        release: ${{ fromJSON(needs.check.outputs.releasesNeeded) }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    outputs:
      continue: ${{ steps.build.outputs.continue }}
      crate: ${{ steps.build.outputs.crate }}
      linFile: ${{ steps.build.outputs.linFile }}
      osxFile: ${{ steps.build.outputs.osxFile }}
      winFile: ${{ steps.build.outputs.winFile }}
    steps:
    - name: Cache
      uses: Swatinem/rust-cache@v2
    - name: Install  Targets
      if: false
      run: |
        if [[ "$RUNNER_OS" == "macOS" ]] ; then
          rustup target add x86_64-apple-darwin
          rustup toolchain install stable-x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup toolchain install stable-x86_64-apple-darwin
        elif [[ "$RUNNER_OS" == "Linux" ]] ; then
          rustup target add x86_64-pc-windows-gnu
          rustup toolchain install stable-x86_64-pc-windows-gnu
        fi
      env:
        rids: ${{ needs.check.outputs.rids }}
    - name: Build Library
      id: build
      env:
        CARGO_NET_GIT_FETCH_WITH_CLI: true
        release: ${{ matrix.release }}
        releasePrefix: ${{ needs.check.outputs.releasePrefix }}
        rids: ${{ needs.check.outputs.rids }}
        crate: icu_capi_cdylib
      run: |
        #
        # Get info about the release being processed
        echo "Processing $release"
        curl -L https://crates.io/api/v1/crates/${crate}/${release#"$releasePrefix"}/download | tar -xzf -
        folder="${crate}-${release#"$releasePrefix"}"
        cd "$folder"
        echo "Folder is $folder"
        CARGO_PROFILE_RELEASE_LTO=true
        CARGO_PROFILE_RELEASE_OPT_LEVEL="3"
        CARGO_PROFILE_RELEASE_PANIC="abort"
        CARGO_PROFILE_RELEASE_STRIP="true"
        if [[ "$RUNNER_OS" == "Windows" ]] && [[ "$rids" == *"win"* ]]; then
          target="x86_64-pc-windows-msvc"
          cargo build --release --target "$target" --features "buffer_provider provider_fs"
          winFile="$folder/target/$target/release/$crate.dll"
          echo "Built $target to $winFile"
          echo "winFile=$winFile" >> $GITHUB_OUTPUT
        elif [[ "$RUNNER_OS" == "Linux" ]] && [[ "$rids" == *"linux"* ]] ; then
          target="x86_64-unknown-linux-gnu"
          cargo build --release --target "$target" --features "buffer_provider provider_fs"
          linFile="$folder/target/$target/release/lib$crate.so"
          echo "Built $target to $linFile"
          echo "linFile=$linFile" >> $GITHUB_OUTPUT
        elif [[ "$RUNNER_OS" == "macOS" ]] && [[ "$rids" == *"osx"* ]] ; then
          x64="x86_64-apple-darwin"
          aarch64="aarch64-apple-darwin"
          rustup target add "$x64"
          rustup target add "$aarch64"
          cargo build --release --target "$x64" --target "$aarch64" --features "buffer_provider provider_fs"
          x64="target/$x64/release"
          aarch64="target/$aarch64/release"
          target="target/apple-darwin/release"
          mkdir -p "$target"
          lipo -create "$x64/libicu_capi_cdylib.dylib" "$aarch64/libicu_capi_cdylib.dylib" -output "$target/libicu_capi_cdylib.dylib"
          osxFile="$folder/$target/lib$crate.dylib"
          echo "Built $target to $osxFile"
          echo "osxFile=$osxFile" >> $GITHUB_OUTPUT
        else
          echo "Skipping $RUNNER_OS, no RIDs match."
          echo "continue=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "Done building"
        #
        # Outputs
        echo "continue=true" >> $GITHUB_OUTPUT
        echo "crate=${crate}" >> $GITHUB_OUTPUT
        echo "folder=${folder}" >> $GITHUB_OUTPUT

    - uses: actions/upload-artifact@v3
      if: runner.os == 'Linux' && contains(needs.check.outputs.rids, 'linux-x64')
      with:
        name: ${{ matrix.release }}-linux-x64
        path: ${{ steps.build.outputs.linFile }}
    - uses: actions/upload-artifact@v3
      if: runner.os == 'Windows' && contains(needs.check.outputs.rids, 'win-x64')
      with:
        name: ${{ matrix.release }}-win-x64
        path: ${{ steps.build.outputs.winFile }}
    - uses: actions/upload-artifact@v3
      if: runner.os == 'macOS' && contains(needs.check.outputs.rids, 'osx')
      with:
        name: ${{ matrix.release }}-osx
        path: ${{ steps.build.outputs.osxFile }}


  nupkg:
    name: Publish NuPkg
    needs: [ check, binaries ]
    if: |
      needs.check.outputs.continue == 'true'
    strategy:
      fail-fast: true
      max-parallel: 3
      matrix:
        version: ${{ fromJson(needs.check.outputs.releasesNeeded) }}
        rid: ${{ fromJson(needs.check.outputs.ridArray) }}
    runs-on: ubuntu-22.04
    steps:
    - name: Get Source
      uses: actions/checkout@v3

    - name: Data
      id: data
      env:
        debug: ${{ needs.check.outputs.debug }}
        version: ${{ matrix.version }}
        releasePrefix: ${{ needs.check.outputs.releasePrefix }}
        gitUrl: ${{ needs.check.outputs.gitUrl }}
        rid: ${{ matrix.rid }}
        linFile: ${{ needs.binaries.outputs.linFile }}
        osxFile: ${{ needs.binaries.outputs.osxFile }}
        winFile: ${{ needs.binaries.outputs.winFile }}
      run: |
        gitBranch=$version
        continue="true"
        case $rid in
          "linux-x64") filename="${linFile##*/}" ;;
          "win-x64")   filename="${winFile##*/}" ;;
          "osx")       filename="${osxFile##*/}" ;;
          *)           echo "Unknown RID $rid" && continue="false" ;;
        esac
        echo "filename=${filename}" >> $GITHUB_OUTPUT
        echo "location=${location}" >> $GITHUB_OUTPUT
        echo "ersion=${version#"$releasePrefix"}" >> $GITHUB_OUTPUT # remove the v
        echo "packageName=StirlingLabs.icu4x.runtime.${rid}" >> $GITHUB_OUTPUT
        echo "gitUrl=${gitUrl}" >> $GITHUB_OUTPUT
        echo "continue=${continue}" >> $GITHUB_OUTPUT

    - name: Get Libraries
      if: steps.data.outputs.continue == 'true'
      id: libraries
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.version }}-${{ matrix.rid }}
        path: download

    - name: Show File Context
      if: steps.data.outputs.continue == 'true'
      run: |
        find .

    - name: Create NuSpec
      if: steps.data.outputs.continue == 'true'
      id: nuspec
      uses: StirlingLabs/CreateNuSpecAction@main
      with:
        id: ${{ steps.data.outputs.packageName }}
        version: ${{ steps.data.outputs.ersion }}
        title: icu4x runtime for ${{ matrix.rid }} ${{ matrix.version }}
        description: |
          Platform-specific runtime for icu4x, Unicode's Rust implementation of the International Components for Unicode.
        fileSources: ${{ steps.libraries.outputs.download-path }}/${{ steps.data.outputs.filename }}
        fileTargets: runtimes/${{ matrix.rid }}/native/${{ steps.data.outputs.filename }}
        readme: README.md
        icon: SL.png
        gitUrl: ${{ steps.data.outputs.gitUrl }}
        authors: Unicode Consortium, Stirling Labs Team

    - name: Build NuPkg
      if: steps.data.outputs.continue == 'true'
      id: build
      env:
        nuspec: ${{ steps.nuspec.outputs.filename }}
      run: |
        nuget pack $nuspec
        [ $? -eq 0 ] && continue="true" || continue="false"
        echo "continue=${continue}" >> $GITHUB_OUTPUT
        ls -la

    - name: Push NuPkg
      if: steps.build.outputs.continue == 'true'
      id: push
      env:
        debug: ${{ needs.check.outputs.debug }}
        githubKey: ${{ github.token }}
        githubUrl: "https://nuget.pkg.github.com/${{github.repository_owner}}/index.json"
        nugetKey: ${{ secrets.NUGET_STIRLINGLABS_API_KEY }}
        nugetUrl: "https://api.nuget.org/v3/index.json"
      run: |
        if [[ "$debug" == "true" ]] ; then
          key="$githubKey" && url="$githubUrl"
        else
          key="$nugetKey" && url="$nugetUrl"
        fi
        dotnet nuget push *.nupkg -k $key -s $url --no-symbols --skip-duplicate
        [ $? -eq 0 ] && continue="true" || continue="false"
        echo "continue=${continue}" >> $GITHUB_OUTPUT

    - name: Summary
      if: steps.push.outputs.continue == 'true'
      id: summary
      env:
        id: ${{ steps.data.outputs.packageName }}
        version: ${{ matrix.version }}
        rid: ${{ matrix.rid }}
      run: |
        echo "### Uploaded NuPkg for [${id}](https://www.nuget.org/packages/${id}) ${version} ${rid}." >> $GITHUB_STEP_SUMMARY
