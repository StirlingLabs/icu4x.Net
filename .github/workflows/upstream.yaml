name: Follow Upstream

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ '**', '!gh-pages', '!coverage' ]
    types: [ opened, reopened, ready_for_review, synchronize ]
  schedule:
    - cron: '0 17 * * 0'
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  check:
    name: Upstream
    uses: StirlingLabs/Actions/.github/workflows/nugetCheckRelease.yaml@main
    with:
      upstream: 'unicode-org/icu4x'
      rids: 'linux-x64 win-x64 osx'
      releasePrefix: 'icu@'
      ignoreReleases: '1.0.0-beta1 0.6.0 0.5.0 0.4.1 0.4.0 0.3.0 0.2.0 0.1.0'
      nupkgName: 'StirlingLabs.icu4x.runtime.RID'

  binaries:
    name: Build
    needs: [ check ]
    if: needs.check.outputs.continue == 'true'
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        release: [ 'icu@1.1.0' ] # ${{ fromJSON(needs.check.outputs.releasesNeeded) }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    outputs:
      continue: ${{ steps.download.outputs.continue }} #FIXME
      manifest: ${{ steps.download.outputs.manifest }} #FIXME
      matrixRid: ${{ steps.download.outputs.ridArray }} #FIXME
      readme: ${{ steps.ancillary.outputs.readme }} #FIXME
      icon: ${{ steps.ancillary.outputs.icon }} #FIXME
    steps:
    - name: Cache
      uses: Swatinem/rust-cache@v2
    - name: Install  Targets
      if: false
      run: |
        if [[ "$RUNNER_OS" == "macOS" ]] ; then
          rustup target add x86_64-apple-darwin
          rustup toolchain install stable-x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup toolchain install stable-x86_64-apple-darwin
        elif [[ "$RUNNER_OS" == "Linux" ]] ; then
          rustup target add x86_64-pc-windows-gnu
          rustup toolchain install stable-x86_64-pc-windows-gnu
        fi
      env:
        rids: ${{ needs.check.outputs.rids }}
    - name: Build Library
      id: build
      env:
        CARGO_NET_GIT_FETCH_WITH_CLI: true
        release: ${{ matrix.release }}
        releasePrefix: ${{ needs.check.outputs.releasePrefix }}
        releasesUrl: ${{ needs.check.outputs.releasesUrl }}
        tagsUrl: ${{ needs.check.outputs.tagsUrl }}
        rids: ${{ needs.check.outputs.rids }}
        crate: icu_capi_cdylib
      run: |
        #
        # Get info about the release being processed
        echo "Processing $release"
        curl -L https://crates.io/api/v1/crates/${crate}/${release#"$releasePrefix"}/download | tar -xzf -
        folder="${crate}-${release#"$releasePrefix"}"
        cd "$folder"
        echo "Folder is $folder"
        CARGO_PROFILE_RELEASE_LTO=true
        CARGO_PROFILE_RELEASE_OPT_LEVEL="3"
        if [[ "$RUNNER_OS" == "Windows" ]] && [[ "$rids" == *"win"* ]]; then
          target="x86_64-pc-windows-msvc"
          cargo build --release --target "$target"
          echo "Built $target"
          winFile="$folder/target/$target/release/$crate.dll"
          echo "winFile=$winFile" >> $GITHUB_OUTPUT
        elif [[ "$RUNNER_OS" == "Linux" ]] && [[ "$rids" == *"linux"* ]] ; then
          target="x86_64-unknown-linux-gnu"
          cargo build --release --target "$target"
          echo "Built $target"
          linFile="$folder/target/$target/release/lib$crate.so"
          echo "linFile=$linFile" >> $GITHUB_OUTPUT
        elif [[ "$RUNNER_OS" == "macOS" ]] && [[ "$rids" == *"osx"* ]] ; then
          x64="x86_64-apple-darwin"
          aarch64="aarch64-apple-darwin"
          rustup target add "$x64"
          rustup target add "$aarch64"
          cargo build --release --target "$x64" --target "$aarch64"
          x64="target/$x64/release"
          aarch64="target/$aarch64/release"
          target="target/apple-darwin/release"
          mkdir -p "$target"
          lipo -create "$x64/libicu_capi_cdylib.dylib" "$aarch64/libicu_capi_cdylib.dylib" -output "$target/libicu_capi_cdylib.dylib"
          osxFile="$folder/$target/lib$crate.dylib"
          echo "osxFile=$osxFile" >> $GITHUB_OUTPUT
        fi
        echo "Done building"

        #
        # Outputs
        echo "continue=${continue}" >> $GITHUB_OUTPUT
        echo "manifest=${manifest}" >> $GITHUB_OUTPUT
        echo "crate=${crate}" >> $GITHUB_OUTPUT
        echo "folder=${folder}" >> $GITHUB_OUTPUT
    - uses: actions/upload-artifact@v3
      if: runner.os == 'Linux' && contains(needs.check.outputs.rids, 'linux-x64')
      with:
        name: linux-x64
        path: ${{ steps.build.outputs.linFile }}
    - uses: actions/upload-artifact@v3
      if: runner.os == 'Windows' && contains(needs.check.outputs.rids, 'win-x64')
      with:
        name: win-x64
        path: ${{ steps.build.outputs.winFile }}
    - uses: actions/upload-artifact@v3
      if: runner.os == 'macOS' && contains(needs.check.outputs.rids, 'osx')
      with:
        name: osx
        path: |
          ${{ steps.build.outputs.osxFile }}
